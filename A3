[8] 1. Write recurrence relations for the running time of the following algorithms as a function of n. 
[3] a. Assume that n is the number of elements of A[first, . . . , last], 
that is, n = last − first + 1. 
Algorithm Quantal(A, first, last) 
if (n ≤ 5) then 
return A[first] + A[last] 

quint ← floor{ (4 * first + last)/5 }
return Quantal(A, first + 1, last − 2) ∗ Quantal(A, quint, last) 
	
T(n) 	= C									n <= 5
T(n)	= T((last-2) - (first+1) + 1) * T(last - quint +1)				n >5
	= T(last-2 -first-1) + 1) * T(last - floor{(4 * first + last)/5} +1)
= T(last - first - 3) + 1) * T(last - floor{(4 * first + last)/5} +1)
= T(last - first + 1) - 3) * T(last - floor{(4/5first + last/5} +1)
=			* T(5/5last -4/5first + -last/5+1)
=			* T( -4/5first + 4/5last +5/5)
=			* T(4/5last - 4/5first +4/5) + 1/5)
= T(last-first + 1) - 3) 	* T(4/5(last - first +1) + 1/5)
(where n = last - first +1)

Recurrence:
T(n) = C + T(n - 3) + T( floor{4/5n + 1/5} )

[5] b. Assume that the call Ringtail(n, x) runs in O(log n) time. 
Algorithm Raring(A, first, n) 
h ← 1 
sum ← 1 
if (n < 8) then 
return n + 1 
while (h < n/2) do 
sum ← sum + Ringtail(n, Raring(A, first + 2*h, n/4)) 
h ← h * 2 
return sum

	Whileloop: 
	(h doubles per each iteration)
	(n halves per iteraction)
T(n)  	= C						n < 8		
Recurrence: 
T(n)	= C + log(n/2){(T(n/4) + O(logn) }		h < n/2

[9] 2. Using the Akra-Bazzi method, give a tight upper bound on the solution to the following recurrence relation:

Hint: Determining p exactly may be difficult, but one can easily find two values p− and p+ such that p− < p < p+, and that will be enough to solve the recurrence. 

	T(n) =  T(n/2) + 2 · T(n/3) + T(n/6) + n^2 	if n ≥ 6 
1 					if n ≤ 5
		a=1	       a=2	a=1
		b=½	       b=⅓	b=⅙					
d = 2
	
Solving for P: 	(½)^P + 2(⅓)^P +(⅙)^P
	P = 0: 	(no)
	p = 2:	(1/4) + 2 · (1/9) + (1/36)  	p+
	p = 1: 	(1/2) + 2 · (1/3) + (1/6)  	p-
Therefore, 1 < p < 2

Integrals:
	#1: Integral_1^n{ u^c * (log(u))^d } du = theta(n^(c+1) * (log(n))^d ) 
									For any c != -1, 
									 d >= 0 Integral_1^n{ u^c * 
	Integral_1^n{ u^c * (log(u))^d }	
	Function as g(n^2):
	
Integral_1^n{ u^2 / u^(p-1) * du }
Integral_1^n{ u^(2-p-1) * du }
Integral_1^n{ u^(1-p) * du }

	Using Cheat Sheat for c != -1:
	= theta(n^(c+1) * (log(n))^d )
Where d=0, c = 1-0
= theta(n^(1-p+1) *1 )
= theta(n^(2-p) )

Overall Theorem:
T(n) = theta(n^p * (1 + theta(n^(2-p) ) )
T(n) = theta(n^p + n^p (n^(2-p) ) )
T(n) = theta((n^p + n^2)
Where 1 < p < 2: 
we use dominant term, so:
T(n) = theta(n^2)

[8] 3. Solve the following recurrence relations by applying the Master theorem. Assume that T(n) ∈ Θ(1) when n is sufficiently small.
Master Theorem, as: alpha = a/(b^d)

[4] a. T(n) = 8T(n/3) + n^2 
	a = 8, b = 3, d =2
	8/(3^2) < 1
		->  S = O(1), so T(n) = S*n^d 	= O(n^d)
	= Theta(n^2)

[4] b. T(n) = 3T(floor{n/9}) + √ n 
	a = 3, b = 9, d =½
	3/(sqrt(9) == 1
		-> T(n) = (L+1)*n^d 		= O(n^d log(n))
d = ½, therefore: 
=Theta(sqrt(n)* log(n))

[4] c. T(n) = 5T(floor{n/2}) + n^2
	a = 5, b = 2, d =2 
	5/(2^2) > 1
		->  S = O(alpha^L) = O( (a/(b^d) )^logb(n) * n^d)
						= O(n^(logb(a) )
	=Theta(n^(log2(5) )




[12] 4. You are interested in analyzing some hard-to-obtain data from two separate databases. 
Each database contains n numerical values — so there are 2n values in total — and you may assume that no two values are the same. 
You would like to determine the median of this set of 2n values (this is the nth smallest value). 
However the only way you can access these values is through queries to the databases. In a single query, you can specify a value k to one of the two databases, and the chosen database will return the k th smallest value that it contains. Since queries are expensive, you would like to compute the median using as few queries as possible.

[4] a. Suppose that you compare the median (n/2 th smallest) element of the first database to the median element of the second database. These elements divide each database in two “halves”. What does the result of the comparison tell you about the location of the i th smallest value overall, with respect to the four “halves” of the two databases? 
(assume it’s sorted)

We want to find the smallest ith arrays 
Let m1 & m2 be medians of the 1st and 2nd databases respectively
	m1			m2
[ db1  	|	]	[ db2	|	]

Compare m1 and m2. Whichever is the bigger median, 

If i<=n, the i’th element will be smaller than the true median
If i>=n, the i’th element will be larger than the true median

Regardless, both the medians are bounds on the true median. 
The smaller median is a lower bound and the larger median is an upper bound.

If i <= n, the i’th smallest element is smaller than the 2nd half of the array w/ the larger median. 
Otherwise, the i’th smallest element is larger than the 1st half of the array w/ the smaller median. 

If we wanted to figure out the i’th smallest element, we would iterate through the remaining values (eg. if i >= n, we recurse without the upper half of the larger database )



[8] b. Describe a divide-and-conquer algorithm that finds the median value using at most O(log n) queries. 

Let db1 & db2 = databases 1 & 2 respectively. 
Assume a function Query(k, db), which returns the k’th smallest value from given db. 

INPUT: 2 databases, or portions of them, w/ equal sizes
OUTPUT: the median value between the 2 arrays
Algorithm FindMedianFromTwoDBs(db1, db2)
	m1 = Median of db1: Query( ½ of db1’s size rounded up, db1)
	m2 = Median of db2: Query( ½ of db2’s size rounded up, db2)

BASE CASE: 	(1 item per each db)
If Query(1st, db1) == Query(last, db1) 
AND Query(1st, db2) == Query(last, db2) {	
	If m1 > m2 {
Return m2: this is the true median
}
Else 
	Return m1: this is the true median
}

RECURSIVE STEP:
Else {
	If m1 > m2 {
		dbSmaller = portion of db2 between m2 and last value
dbBigger = portion of db1 between 1st value and m1
}
Else {
		dbSmaller = portion of db1 between m1 and last value
dbBigger = portion of db2 between 1st value and m2
}
Somehow make sure both dbSmaller & dbBigger have equal sizes
Return FindMedianFromTwoDBs(dbSmaller, dbBigger)
}

PROOF OF CORRECTNESS:
Claim: This algorithm will always return the true median between two databases
Proof by Induction: 
Base Case: 
WIth two databases, each with size 1, the algorithm will return the true median anyway. QED. 

Inductive Step:
With two databases, each with size n, the algorithm will recurse for half of each database, each time until it reaches the Base case and, hence, return the true median. 	

When partitioning the two databases, we keep in mind that the true median will always be between m1 and m2, regardless of which of the two is bigger. Hence, the algorithm will recurse for the portion of each database which will contain the true median. 
(i.e. if m1>m2, the algorithm recurses for db1 with the 1st to m1’th items, and
for m2 with the m2’th to last items)
	

RUNTIME ANALYSIS:
This is a D&C approach, where the subproblem will be half of the previous problem. 
The recurrence relation for this algorithm is so:
T(n) = C1 + T(n/2)

 By master theorem (where a=1, b=2, d=0), the case will be a=b^d, 
Therefore, this algorithm will be in theta(log(n))

The number of calls to Query() will also be in O(log(n)), because it is directly correllated with how many function calls to the algorithm will be made, hence the number of calls to Query()

